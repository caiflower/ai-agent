// Code generated by MockGen. DO NOT EDIT.
// Source: single_agent.go
//
// Generated by this command:
//
//	mockgen -destination ../../internal/mock/sigle_agent_mock.go -package agent -source single_agent.go
//

// Package agent is a generated GoMock package.
package agent

import (
	reflect "reflect"

	entity "github.com/caiflower/ai-agent/model/entity"
	schema "github.com/cloudwego/eino/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockSingleAgent is a mock of SingleAgent interface.
type MockSingleAgent struct {
	ctrl     *gomock.Controller
	recorder *MockSingleAgentMockRecorder
	isgomock struct{}
}

// MockSingleAgentMockRecorder is the mock recorder for MockSingleAgent.
type MockSingleAgentMockRecorder struct {
	mock *MockSingleAgent
}

// NewMockSingleAgent creates a new mock instance.
func NewMockSingleAgent(ctrl *gomock.Controller) *MockSingleAgent {
	mock := &MockSingleAgent{ctrl: ctrl}
	mock.recorder = &MockSingleAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleAgent) EXPECT() *MockSingleAgentMockRecorder {
	return m.recorder
}

// StreamExecute mocks base method.
func (m *MockSingleAgent) StreamExecute(req *entity.AgentRequest) (*schema.StreamReader[*entity.AgentRespEvent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamExecute", req)
	ret0, _ := ret[0].(*schema.StreamReader[*entity.AgentRespEvent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamExecute indicates an expected call of StreamExecute.
func (mr *MockSingleAgentMockRecorder) StreamExecute(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecute", reflect.TypeOf((*MockSingleAgent)(nil).StreamExecute), req)
}
